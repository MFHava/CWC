//This file was generated for CWC by CWCC
//ATTENTION: Do not modify this file as its content is highly dependent on the design of CWC!
#pragma once
#include <cwc/cwc.hpp>

#include <Windows.h>

namespace cwc::internal {
	template<typename T>
	constexpr
	auto addressof(T && arg) noexcept -> void * {
		return const_cast<void *>(reinterpret_cast<const void *>(std::addressof(std::forward<T>(arg))));
	}
}

namespace cwc::sample::fibonacci {
	class sequence final {
		void * obj;
		using dispatch_t = void(*)(void *, int, void **); //TODO: always the same
		dispatch_t func;

		static
		constexpr
		const char * dll{"sample-fibonacci"}; //binding to respective DLL

		template<typename... Args>
		void cwc_ctor(int ctor, Args &&... args) {
			//TODO: code for loading DLLs belongs into CWC as core service
			using namespace std::string_literals;
			const auto lib = LoadLibrary((dll + ".dll"s).c_str());
			
			const auto init = reinterpret_cast<void(*)(void **, dispatch_t *, int, void **)>(GetProcAddress(lib, "cwc_create_fibonacci"));
			void * tmp[]{cwc::internal::addressof(args)..., nullptr};
			init(&obj, &func, ctor, tmp);
		}

		void cwc_invoke(int op, void ** args) const {
			//TODO: exception handling
			func(obj, op, args);
		}
	public:
		//TODO: empty state / aka moved-from state / partially-formed state after move

		sequence() { cwc_ctor(0); }
		sequence(const int & dummy) { cwc_ctor(1, dummy); }

		sequence(const sequence &) =delete;
		sequence(sequence && other) noexcept {
			std::swap(obj, other.obj);
			std::swap(func, other.func);
		}
		auto operator=(const sequence &) -> sequence & =delete;
		auto operator=(sequence && other) noexcept -> sequence & {
			std::swap(obj, other.obj);
			std::swap(func, other.func);
			return *this;
		}

		~sequence() noexcept { cwc_invoke(0, nullptr); }

		auto calculate(const ::cwc::uint8 & no) const -> ::cwc::uint64 { //TODO: exception handling
			::cwc::uint64 result;
			void * args[]{cwc::internal::addressof(no), cwc::internal::addressof(result)};
			cwc_invoke(1, args);
			return result;
		}
	};
}
