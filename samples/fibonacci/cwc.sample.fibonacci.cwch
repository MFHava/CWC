//This file was generated for CWC by CWCC
//ATTENTION: Do not modify this file as its content is highly dependent on the design of CWC!
#pragma once
#include <cwc/cwc.hpp>

namespace cwc::sample::fibonacci {
	struct sequence final {
		struct cwc_impl;

		sequence() { cwc_dll()(-1, &cwc_self); }
		sequence(const int & dummy) { cwc_dll()(-2, &cwc_self, cwc::internal::addressof(dummy)); }

		sequence(const sequence &) =delete;
		sequence(sequence && other) noexcept : cwc_self{std::exchange(other.cwc_self, nullptr)} {}
		auto operator=(const sequence &) -> sequence & =delete;
		auto operator=(sequence && other) noexcept -> sequence & { std::swap(cwc_self, other.cwc_self); return *this; }

		~sequence() noexcept { cwc_dll()(0, cwc_self); }

		auto calculate(const std::uint8_t & no) const -> std::uint64_t {
			std::uint64_t cwc_result;
			cwc_dll()(+1, cwc_self, cwc::internal::addressof(no), cwc::internal::addressof(cwc_result));
			return cwc_result;
		}
	private:
		static
		auto cwc_dll() -> const cwc::internal::dll & { //TODO: investigate loading at process startup...
			static const cwc::internal::dll instance{"sample-fibonacci", "cwc$sample$fibonacci$sequence"};
			return instance;
		}

		cwc_impl * cwc_self;
	};
}

#define CWC_EXPORT_cwc_sample_fibonacci_sequence \
extern "C" CWC_EXPORT cwc::internal::error_callback CWC_CALL cwc$sample$fibonacci$sequence(int op, void * args[]) noexcept {\
	try {\
		switch(op) {\
			case -1: *reinterpret_cast<void **>(args[0]) = new cwc::sample::fibonacci::sequence::cwc_impl; break;\
			case -2: *reinterpret_cast<void **>(args[0]) = new cwc::sample::fibonacci::sequence::cwc_impl{*reinterpret_cast<int *>(args[1])}; break;\
			case 0: delete reinterpret_cast<cwc::sample::fibonacci::sequence::cwc_impl *>(args[0]); break;\
			case +1: *reinterpret_cast<std::uint64_t *>(args[2]) = reinterpret_cast<const cwc::sample::fibonacci::sequence::cwc_impl *>(args[0])->calculate(*reinterpret_cast<const std::uint8_t *>(args[1])); break;\
			default: cwc::internal::unreachable(); /*TODO: include some type of crash information*/\
		}\
		return nullptr;\
	} catch(...) {\
		return cwc::internal::store_last_error();\
	}\
}
