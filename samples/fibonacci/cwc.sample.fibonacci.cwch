//This file was generated for CWC by CWCC
//ATTENTION: Do not modify this file as its content is highly dependent on the design of CWC!
#pragma once
#include <cwc/cwc.hpp>

#include <Windows.h>

namespace cwc::internal {
	template<typename T>
	constexpr
	auto addressof(T && arg) noexcept -> void * {
		return const_cast<void *>(reinterpret_cast<const void *>(std::addressof(std::forward<T>(arg))));
	}

	struct dll final { //TODO: is this safe or isn't it forbidden to load a dll whilst beeing inside DllMain...
		dll(const char * file) { //TODO: pass class name
			//TODO: code for loading DLLs belongs into CWC as core service
			using namespace std::string_literals;
			lib = LoadLibrary((file + ".dll"s).c_str());
			assert(lib);
			vptr = reinterpret_cast<void(*)(void *, int, void **)>(GetProcAddress(lib, "cwc_dispatch_fibonacci"));
			assert(vptr);
			ctor = reinterpret_cast<void(*)(void **, int, void **)>(GetProcAddress(lib, "cwc_create_fibonacci"));
			assert(ctor);
		}

		~dll() { FreeLibrary(lib); }

		void(*vptr)(void *, int, void **);
		void(*ctor)(void **, int, void **);
	private:
		HMODULE lib;
	};
}

namespace cwc::sample::fibonacci {
	class sequence final {
		inline
		static
		cwc::internal::dll context{"sample-fibonacci"};

		void * obj;

		template<typename... Args>
		void cwc_ctor(int ctor, Args &&... args) {
			void * tmp[]{cwc::internal::addressof(args)..., nullptr};
			context.ctor(&obj, ctor, tmp);
		}

		void cwc_invoke(int op, void ** args) const {
			//TODO: exception handling
			context.vptr(obj, op, args);
		}
	public:
		//TODO: empty state / aka moved-from state / partially-formed state after move

		sequence() { cwc_ctor(0); }
		sequence(const int & dummy) { cwc_ctor(1, dummy); }

		sequence(const sequence &) =delete;
		sequence(sequence && other) noexcept : obj{std::exchange(other.obj, nullptr)} {}
		auto operator=(const sequence &) -> sequence & =delete;
		auto operator=(sequence && other) noexcept -> sequence & {
			std::swap(obj, other.obj);
			return *this;
		}

		~sequence() noexcept { cwc_invoke(0, nullptr); }

		auto calculate(const ::cwc::uint8 & no) const -> ::cwc::uint64 { //TODO: exception handling
			::cwc::uint64 result;
			void * args[]{cwc::internal::addressof(no), cwc::internal::addressof(result)};
			cwc_invoke(1, args);
			return result;
		}
	};
}
