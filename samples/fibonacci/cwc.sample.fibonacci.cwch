
//          Copyright Michael Florian Hava 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file ../../../LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#include <cwc/cwc.hpp>

//! @brief CWC Sample "Fibonacci Generator"
//! @author Michael Florian Hava
namespace cwc {namespace sample {namespace fibonacci {
	class sequence : public ::cwc::component {
		virtual ::cwc::internal::error_code CWC_CALL cwc$sample$fibonacci$sequence$calculate$0(const ::cwc::uint8 * no, ::cwc::uint64 * cwc_ret) const noexcept =0;
		virtual ::cwc::internal::error_code CWC_CALL cwc$sample$fibonacci$sequence$calculate$1(const ::cwc::array_ref<const ::cwc::uint8> * nos, const ::cwc::array_ref<::cwc::uint64> * results) const noexcept =0;
	public:
		auto calculate(const ::cwc::uint8 & no) const -> ::cwc::uint64 {
			::cwc::uint64 cwc_ret;
			::cwc::internal::call(*this, &sequence::cwc$sample$fibonacci$sequence$calculate$0, &no, &cwc_ret);
			return cwc_ret;
		}
		void calculate(const ::cwc::array_ref<const ::cwc::uint8> & nos, const ::cwc::array_ref<::cwc::uint64> & results) const {
			::cwc::internal::call(*this, &sequence::cwc$sample$fibonacci$sequence$calculate$1, &nos, &results);
		}
		template<typename CWCImplementation, typename CWCTypeList>
		class cwc_implementation : public ::cwc::internal::default_implementation_chaining<CWCImplementation, CWCTypeList> {
			::cwc::internal::error_code CWC_CALL cwc$sample$fibonacci$sequence$calculate$0(const ::cwc::uint8 * no, ::cwc::uint64 * cwc_ret) const noexcept final { return ::cwc::internal::call_and_return_error([&] { *cwc_ret = static_cast<const CWCImplementation &>(*this).calculate(*no); }); }
			::cwc::internal::error_code CWC_CALL cwc$sample$fibonacci$sequence$calculate$1(const ::cwc::array_ref<const ::cwc::uint8> * nos, const ::cwc::array_ref<::cwc::uint64> * results) const noexcept final { return ::cwc::internal::call_and_return_error([&] { static_cast<const CWCImplementation &>(*this).calculate(*nos, *results); }); }
		};
		CWC_CXX_RELAXED_CONSTEXPR
		static auto cwc_uuid() -> ::cwc::uuid { return {static_cast<cwc::uint8>(0x55), static_cast<cwc::uint8>(0x9), static_cast<cwc::uint8>(0x67), static_cast<cwc::uint8>(0x3D), static_cast<cwc::uint8>(0x71), static_cast<cwc::uint8>(0x7), static_cast<cwc::uint8>(0x51), static_cast<cwc::uint8>(0xC5), static_cast<cwc::uint8>(0x97), static_cast<cwc::uint8>(0xAA), static_cast<cwc::uint8>(0x1F), static_cast<cwc::uint8>(0xE8), static_cast<cwc::uint8>(0xA8), static_cast<cwc::uint8>(0x2A), static_cast<cwc::uint8>(0x1A), static_cast<cwc::uint8>(0x6)}; }
	};

	struct generator : sequence {
		CWC_CXX_RELAXED_CONSTEXPR
		static void cwc_uuid() {}
		static auto cwc_fqn() -> ::cwc::string_ref { return "cwc::sample::fibonacci::generator"; }
		using cwc_interfaces = ::cwc::internal::make_base_list<sequence>::type;

	class cwc_factory : public ::cwc::component {
		virtual ::cwc::internal::error_code CWC_CALL cwc$sample$fibonacci$generator$cwc_factory$create$0(::cwc::intrusive_ptr<::cwc::component> * cwc_ret) const noexcept =0;
	public:
		auto create() const -> ::cwc::intrusive_ptr<::cwc::component> {
			::cwc::intrusive_ptr<::cwc::component> cwc_ret;
			::cwc::internal::call(*this, &cwc_factory::cwc$sample$fibonacci$generator$cwc_factory$create$0, &cwc_ret);
			return cwc_ret;
		}
		template<typename CWCImplementation, typename CWCTypeList>
		class cwc_implementation : public ::cwc::internal::default_implementation_chaining<CWCImplementation, CWCTypeList> {
			::cwc::internal::error_code CWC_CALL cwc$sample$fibonacci$generator$cwc_factory$create$0(::cwc::intrusive_ptr<::cwc::component> * cwc_ret) const noexcept final { return ::cwc::internal::call_and_return_error([&] { *cwc_ret = static_cast<const CWCImplementation &>(*this).create(); }); }
		};
		CWC_CXX_RELAXED_CONSTEXPR
		static auto cwc_uuid() -> ::cwc::uuid { return {static_cast<cwc::uint8>(0x12), static_cast<cwc::uint8>(0xEC), static_cast<cwc::uint8>(0x4A), static_cast<cwc::uint8>(0x37), static_cast<cwc::uint8>(0x93), static_cast<cwc::uint8>(0xBB), static_cast<cwc::uint8>(0x54), static_cast<cwc::uint8>(0x62), static_cast<cwc::uint8>(0x81), static_cast<cwc::uint8>(0x3E), static_cast<cwc::uint8>(0xFA), static_cast<cwc::uint8>(0xF0), static_cast<cwc::uint8>(0x48), static_cast<cwc::uint8>(0xD3), static_cast<cwc::uint8>(0x64), static_cast<cwc::uint8>(0x59)}; }
	};
	};

} } } 