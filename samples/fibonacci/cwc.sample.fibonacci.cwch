
//          Copyright Michael Florian Hava 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file ../../../LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#include <cwc/cwc.hpp>

//! @brief CWC Sample "Fibonacci Generator"
//! @author Michael Florian Hava
namespace cwc {namespace sample {namespace fibonacci {
	class sequence : public ::cwc::component {
		virtual
		auto CWC_CALL cwc$sample$fibonacci$sequence$calculate$0(const ::cwc::uint8 * no, ::cwc::uint64 * cwc_ret) const noexcept -> const ::cwc::internal::error * =0;
	public:
		auto calculate(const ::cwc::uint8 & no) const -> ::cwc::uint64 {
			::cwc::uint64 cwc_ret;
			::cwc::internal::call(*this, &sequence::cwc$sample$fibonacci$sequence$calculate$0, &no, &cwc_ret);
			return cwc_ret;
		}
	};

	struct generator : sequence {
		static
		auto cwc_fqn() -> ::cwc::string_ref { return "cwc::sample::fibonacci::generator"; }
		using cwc_interfaces = ::cwc::internal::make_base_list_t<sequence>;

	class cwc_factory : public ::cwc::component {
		virtual
		auto CWC_CALL cwc$sample$fibonacci$generator$cwc_factory$create$0(::cwc::intrusive_ptr<::cwc::component> * cwc_ret) const noexcept -> const ::cwc::internal::error * =0;
	public:
		auto create() const -> ::cwc::intrusive_ptr<::cwc::component> {
			::cwc::intrusive_ptr<::cwc::component> cwc_ret;
			::cwc::internal::call(*this, &cwc_factory::cwc$sample$fibonacci$generator$cwc_factory$create$0, &cwc_ret);
			return cwc_ret;
		}
	};
	};

} } } 

//ATTENTION: don't modify the following code, it contains necessary metadata for CWC
namespace cwc { namespace internal {
	template<>
	struct interface_id<::cwc::sample::fibonacci::sequence> final : uuid_constant<0x55, 0x9, 0x67, 0x3D, 0x71, 0x7, 0x51, 0xC5, 0x97, 0xAA, 0x1F, 0xE8, 0xA8, 0x2A, 0x1A, 0x6> {};

	template<typename Implementation, typename TypeList>
	class vtable_implementation<cwc::sample::fibonacci::sequence, Implementation, TypeList> : public ::cwc::internal::default_implementation_chaining<Implementation, TypeList> {
		auto CWC_CALL cwc$sample$fibonacci$sequence$calculate$0(const ::cwc::uint8 * no, ::cwc::uint64 * cwc_ret) const noexcept -> const ::cwc::internal::error * final { return ::cwc::internal::call_and_return_error([&] { *cwc_ret = static_cast<const Implementation &>(*this).calculate(*no); }); }
		//detect missing methods:
		void calculate();
	};

	template<>
	struct interface_id<::cwc::sample::fibonacci::generator::cwc_factory> final : uuid_constant<0x12, 0xEC, 0x4A, 0x37, 0x93, 0xBB, 0x54, 0x62, 0x81, 0x3E, 0xFA, 0xF0, 0x48, 0xD3, 0x64, 0x59> {};

	template<typename Implementation, typename TypeList>
	class vtable_implementation<cwc::sample::fibonacci::generator::cwc_factory, Implementation, TypeList> : public ::cwc::internal::default_implementation_chaining<Implementation, TypeList> {
		auto CWC_CALL cwc$sample$fibonacci$generator$cwc_factory$create$0(::cwc::intrusive_ptr<::cwc::component> * cwc_ret) const noexcept -> const ::cwc::internal::error * final { return ::cwc::internal::call_and_return_error([&] { *cwc_ret = static_cast<const Implementation &>(*this).create(); }); }
		//detect missing methods:
		void create();
	};

} }
