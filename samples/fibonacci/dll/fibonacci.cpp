
//          Copyright Michael Florian Hava 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file ../../../LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include "fibonacci.h"

namespace sample {
	auto fibonacci::calculate(::cwc::uint8 no) const -> ::cwc::uint64 {
		if(no > 93) throw std::out_of_range{"fibonacci number 93 is the last to fit into uint64"};
		::cwc::uint64 a{0}, b{1};
		for(decltype(no) i{0}; i < no; ++i) {
			const auto c{a + b};
			a = b;
			b = c;
		}
		return a;
	}
}

extern "C" CWC_EXPORT void CWC_CALL cwc_ctor_cwc_sample_fibonacci_sequence(void ** obj, int ctor, void ** args) noexcept { //TODO: this will be generated by CWCC
	switch(ctor) {
		case 0: *obj = new sample::fibonacci; break;
		case 1: *obj = new sample::fibonacci{*(int *)args[0]}; break;
		default: cwc::internal::unreachable();
	}
}

extern "C" CWC_EXPORT void CWC_CALL cwc_vptr_cwc_sample_fibonacci_sequence(void * obj, int op, void ** args) noexcept { //TODO: this will be generated by CWCC
	switch(op) {
		case 0: delete reinterpret_cast<sample::fibonacci *>(obj); break;
		case 1: *reinterpret_cast<::cwc::uint64 *>(args[1]) = reinterpret_cast<const sample::fibonacci *>(obj)->calculate(*reinterpret_cast<const ::cwc::uint8 *>(args[0])); break;
		default: cwc::internal::unreachable();
	}
}
