
//          Copyright Michael Florian Hava 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file ../../../LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include "fibonacci.h"

namespace cwc::sample::fibonacci {
	auto sequence::impl::calculate(::cwc::uint8 no) const -> ::cwc::uint64 {
		if(no > 93) throw std::out_of_range{"fibonacci number 93 is the last to fit into uint64"};
		::cwc::uint64 a{0}, b{1};
		for(decltype(no) i{0}; i < no; ++i) {
			const auto c{a + b};
			a = b;
			b = c;
		}
		return a;
	}
}

extern "C" CWC_EXPORT void CWC_CALL cwc_sample_fibonacci_sequence(unsigned op, void * args[]) noexcept { //TODO: this will be generated by CWCC
	try {
		switch(op) {
			case 0: *reinterpret_cast<void **>(args[1]) = new cwc::sample::fibonacci::sequence::impl; break;
			case 1: *reinterpret_cast<void **>(args[1]) = new cwc::sample::fibonacci::sequence::impl{*reinterpret_cast<int *>(args[2])}; break;
			case 2: delete reinterpret_cast<cwc::sample::fibonacci::sequence::impl *>(args[1]); break;
			case 3: *reinterpret_cast<::cwc::uint64 *>(args[3]) = reinterpret_cast<const cwc::sample::fibonacci::sequence::impl *>(args[1])->calculate(*reinterpret_cast<const ::cwc::uint8 *>(args[2])); break;
			default: cwc::internal::unreachable();
		}
	} catch(...) { //TODO: exception marshalling
		*reinterpret_cast<int *>(args[0]) = 10;
	}
}
