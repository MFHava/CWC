#include <cstdint>

namespace cwc::sample::fibonacci {
	template<typename T>
	component [[nodiscard]] sequence final {
		using flag = std::conditional_t<std::is_integral_v<T>, std::true_type, std::false_type>;

		sequence();

		[[deprecated("for visualization only")]]
		sequence(const int & dummy) =delete;

		//! @brief compute fibonacci number
		//! @param[in] no fibonacci number to compute
		//! @returns fibonacci number
		[[nodiscard("result of computation")]]
		auto calculate(T no) const -> std::uint64_t;

		void calculate() =delete;

		//! @returns max supported fibonacci number that can be computed before result would overflow
		[[nodiscard("max valid parameter for calculate")]]
		static
		auto max() noexcept -> T;
	};

	@library("sample-fibonacci")
	extern template component sequence<std::uint8_t>;
}