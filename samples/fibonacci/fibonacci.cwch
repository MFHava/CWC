//generated with CWCC

#pragma once
#include <cwc/cwc.hpp>

namespace cwc::sample::fibonacci {
	struct [[nodiscard]] sequence final {
		sequence(const sequence &) =delete;
		sequence(sequence && cwc_other) noexcept : cwc_self{std::exchange(cwc_other.cwc_self, nullptr)} {}
		auto operator=(const sequence &) -> sequence & =delete;
		auto operator=(sequence && cwc_other) noexcept -> sequence & { std::swap(cwc_self, cwc_other.cwc_self); return *this; }
		~sequence() noexcept { cwc_context().call<&cwc_vtable::cwc_0>(cwc_self); }


		sequence() { cwc_context().call<&cwc_vtable::cwc_1>(&cwc_self); }

		[[deprecated("for visualization only")]]
		sequence(const int & dummy) =delete;

		//! @brief compute fibonacci number
		//! @returns fibonacci number
		[[nodiscard]]
		auto calculate(
			std::uint8_t no //!< [in] no
		) const -> std::uint64_t {
			std::uint64_t cwc_result;
			cwc_context().call<&cwc_vtable::cwc_3>(cwc_self, std::move(no), std::addressof(cwc_result));
			return cwc_result;
		}

		void calculate() =delete;

		//! @returns max supported fibonacci number that can be computed before result would overflow
		[[nodiscard]]
		static
		auto max() noexcept -> std::uint8_t {
			std::uint8_t cwc_result;
			cwc_context().call<&cwc_vtable::cwc_5>(std::addressof(cwc_result));
			return cwc_result;
		}
	private:
		friend
		cwc::internal::access<sequence>;

		struct cwc_vtable final {
			void(CWC_CALL * cwc_0)(void *) noexcept;
			cwc::internal::error_callback(CWC_CALL * cwc_1)(void **) noexcept;
			cwc::internal::error_callback(CWC_CALL * cwc_3)(const void *, std::uint8_t, std::uint64_t *) noexcept;
			void(CWC_CALL * cwc_5)(std::uint8_t *) noexcept;
		};

		static
		auto cwc_context() -> const cwc::internal::context & {
			static const cwc::internal::context instance{"sample-fibonacci", "cwc_export_3cwc6sample9fibonacci8sequence"};
			return instance;
		}

		void * cwc_self;
	};
#define CWC_EXPORT_3cwc6sample9fibonacci8sequence(cwc_impl)\
	extern "C" CWC_EXPORT const typename cwc::internal::access<cwc::sample::fibonacci::sequence>::vtable cwc_export_3cwc6sample9fibonacci8sequence{\
		+[](void * cwc_self) noexcept { delete reinterpret_cast<cwc_impl *>(cwc_self); },\
		+[](void ** cwc_result) noexcept { return cwc::internal::try_([&] { *cwc_result = new cwc_impl{}; }); },\
		+[](const void * cwc_self, std::uint8_t no, std::uint64_t * cwc_result) noexcept { return cwc::internal::try_([&] { *cwc_result = reinterpret_cast<const cwc_impl *>(cwc_self)->calculate(std::move(no)); }); },\
		+[](std::uint8_t * cwc_result) noexcept { *cwc_result = cwc_impl::max(); }\
	}
}
