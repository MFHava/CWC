
//          Copyright Michael Florian Hava 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file ../../LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#define CWC_HPP_HEADER_INCLUDED

#include "internal/compiler_detection.hpp"

#define CWC_OS_WINDOWS 0
#define CWC_OS_LINUX   0

#ifdef _WIN32
	#undef  CWC_OS_WINDOWS
	#define CWC_OS_WINDOWS 1
#elif __linux__
	#undef  CWC_OS_LINUX
	#define CWC_OS_LINUX 1
#else
	#error "unknown operating system"
#endif

#if CWC_COMPILER_IS_MSVC || (CWC_COMPILER_IS_Intel && CWC_OS_WINDOWS)
	#define CWC_CALL       __cdecl
	#define CWC_EXPORT     __declspec(dllexport)
	#define CWC_PACK_BEGIN __pragma(pack(push, 1))
	#define CWC_PACK_END   __pragma(pack(pop))
#elif CWC_COMPILER_IS_GNU || (CWC_COMPILER_IS_Intel && CWC_OS_LINUX)
	#define CWC_CALL       __attribute__((__cdecl__))
	#define CWC_EXPORT     __attribute__((visibility("default")))
	#define CWC_PACK_BEGIN _Pragma("pack(push, 1)")
	#define CWC_PACK_END   _Pragma("pack(pop)")
#endif

#if CWC_COMPILER_CXX_RELAXED_CONSTEXPR
	#define CWC_CXX_RELAXED_CONSTEXPR constexpr
#else
	#define CWC_CXX_RELAXED_CONSTEXPR
#endif

#include <atomic>
#include <memory>
#include <cassert>
#include <cstdint>
#include <cstring>
#include <ostream>
#include <stdexcept>
#include <functional>
#include <type_traits>

//! @brief public API of C++ with Components
namespace cwc {
	//! @brief user defined literals
	namespace literals {}

	//! @brief internal implementation details
	//! @attention no member of this namespace is part of the public CWC API
	namespace internal {}
}
#include "public/array.hpp"
#include "public/array_ref.hpp"

#include "public/types.hpp"

#include "internal/error_code.hpp"

#include "public/optional.hpp"
#include "public/string_ref.hpp"
#include "public/intrusive_ptr.hpp"

#include "internal/type_list.hpp"
#include "internal/make_base_list.hpp"
#include "internal/call.hpp"
#include "internal/default_implementation_chaining.hpp"
#include "internal/cast_to_interface.hpp"

#include "public/component.hpp"
#include "public/enumerator.hpp"
#include "public/config_enumerators.hpp"
#include "public/context.hpp"
#include "public/default_implementations.hpp"

#include "internal/error_handling.hpp"